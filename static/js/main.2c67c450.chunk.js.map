{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/Countries/Countries.jsx","img/image.png","App.js","index.js","App.module.css","components/Charts/Charts.module.css","components/Countries/Countries.module.css"],"names":["module","exports","Cards","props","confirmed","data","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","calls","fetchData","country","a","apiRequests","finalUrl","axios","get","needed","console","error","dailyFetch","map","daily","total","date","reportDate","getCountries","countries","name","log","Charts","prop","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","Countries","allCountries","setAllCountries","fetchCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","countryChange","target","i","App","state","undefined","response","this","setState","params","image","alt","src","headImg","bind","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c67c450.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css';\n\nfunction Cards(props) {\n    const confirmed = props.data.confirmed;\n    const recovered = props.data.recovered;\n    const deaths = props.data.deaths;\n    const lastUpdate = props.data.lastUpdate;\n\n    if (!confirmed) {\n        return 'Loading ...';\n    }\n\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp  start={0} end={confirmed.value} duration={2} separator=',' />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of active cases.</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recoveries</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp  start={0} end={recovered.value} duration={2} separator=',' />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recovered people.</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Death</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp  start={0} end={deaths.value} duration={2} separator=',' />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of deaths.</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nexport default Cards","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\nlet calls = 0;\n\nexport async function fetchData(country) {\n    apiRequests();\n    let finalUrl = url;\n    if (country) finalUrl = `${url}/countries/${country}`\n    try {\n        const { data } = await axios.get(finalUrl);\n\n        const needed = {\n            confirmed: data.confirmed,\n            recovered: data.recovered,\n            deaths: data.deaths,\n            lastUpdate: data.lastUpdate,\n        }\n\n        return needed;\n    } catch (err) {\n        console.error(err);\n    }\n}\n\nexport async function dailyFetch() {\n    apiRequests();\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n\n        const needed = data.map((daily) => ({\n            confirmed: daily.confirmed.total,\n            recovered: daily.recovered.total,\n            deaths: daily.deaths.total,\n            date: daily.reportDate,\n        }));\n\n        return needed;\n    } catch (err) {\n        console.error(err);\n    }\n}\n\nexport async function getCountries() {\n    apiRequests();\n    try {\n        const { data } = await axios.get(`${url}/countries`);\n\n        return data.countries.map((country) => country.name)\n    } catch (err) {\n        console.error(err);\n    }\n}\n\nfunction apiRequests() {\n    calls += 1;\n    console.log(`API called ${calls}`);\n}","import React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport { dailyFetch } from '../../api/index';\n\nimport styles from './Charts.module.css';\n\nfunction Charts(prop) {\n    const [dailyData, setDailyData] = useState([]);\n\n    const data = prop.data;\n    const country = prop.country;\n\n    useEffect(() => {\n        async function fetchAPI() {\n            setDailyData(await dailyFetch());\n        }\n        fetchAPI();\n    }, []);\n\n    const lineChart = (\n        dailyData.length ? (\n            <Line\n                data={{\n                    labels: dailyData.map(({date}) => date),\n                    datasets: [{\n                        data: dailyData.map(({confirmed}) => confirmed),\n                        label: 'Infected',\n                        borderColor: '#3333ff',\n                        fill: true\n                    }, {\n                        data: dailyData.map(({deaths}) => deaths),\n                        label: 'Deaths',\n                        borderColor: 'red',\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                        fill: true\n                    }],\n                }}\n            />\n        ) : null\n    )\n\n    const barChart = (\n        data.confirmed ? (\n            <Bar \n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: [{\n                        label: 'People',\n                        backgroundColor: [\n                            'rgba(0, 0, 255, 0.5)',\n                            'rgba(0, 255, 0, 0.5)',\n                            'rgba(255, 0, 0, 0.5)',\n                        ],\n                        data: [data.confirmed.value, data.recovered.value, data.deaths.value]\n                    }]\n                }}\n                options={{\n                    legend: {display: false},\n                    title: {display: true, text: `Current state in ${country}`},\n                }}\n            />\n        ) : null\n    )\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart : lineChart}\n        </div>\n    );\n}\n\nexport default Charts","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\n\nimport { getCountries } from '../../api/index';\n\nimport styles from './Countries.module.css';\n\nfunction Countries(prop) {\n\n    const [allCountries, setAllCountries] = useState([]);\n\n    useEffect(() => {\n        async function fetchCountries() {\n            setAllCountries(await getCountries());\n        }\n        fetchCountries();\n    }, [setAllCountries]);\n\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(e) => prop.countryChange(e.target.value)}>\n                <option value='Global'>Global</option>\n                {allCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    );\n}\n\nexport default Countries","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react';\n\nimport {Cards, Charts, Countries} from './components/index';\n\nimport styles from './App.module.css';\n\nimport {fetchData} from './api/index';\n\nimport headImg from './img/image.png';\n\nclass App extends React.Component {\n    state = {\n        data: {},\n        country: undefined,\n    }\n\n    async componentDidMount() {\n        const response = await fetchData();\n        this.setState({data: response});\n    }\n\n    async countryChange(params) {\n        if (params === 'Global') params = undefined;\n        const response = await fetchData(params);\n        this.setState({data: response, country: params});\n    }\n\n    render() {\n        const { data, country } = this.state;\n\n        return (\n            <div className={styles.container}>\n                <img className={styles.image} alt=\"COVID 19\" src={headImg}/>\n                <Cards data={data} />\n                <Countries countryChange={this.countryChange.bind(this)}/>\n                <Charts data={data} country={country}/>\n            </div>\n        );\n    }\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1mZfu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Countries_formControl__3VMJK\"};"],"sourceRoot":""}